/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package gestao.de.stock.ui.paginas;

import gestao.de.stock.api.Conexao;
import gestao.de.stock.api.Utilidades;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.plaf.basic.BasicInternalFrameUI;
import javax.swing.table.DefaultTableModel;


/**
 *
 * @author PAT
 */
public final class CentroCusto extends javax.swing.JInternalFrame {

    //Inicializar os contrutores
    Conexao c;
    Utilidades u;
    Statement stm;
    
    
    public CentroCusto(Conexao c, Utilidades u) throws Exception {
        this.c = c;
        this.u = u;
        stm = this.c.fazerConexao().createStatement();
        
        initComponents();
        setPainelFixo();
        tabelaCentro_Custo();
    }
    
    private void setPainelFixo(){
        this.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        BasicInternalFrameUI bi =(BasicInternalFrameUI)this.getUI();  
        bi.setNorthPane(null);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tabela = new javax.swing.JTable();
        dados = new javax.swing.JPanel();
        labelResponsavel = new javax.swing.JLabel();
        textoResponsavel = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        labelTexto = new javax.swing.JLabel();
        textoTexto = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        labelCusto = new javax.swing.JLabel();
        textoLocalizacao = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        labelLocalizacao = new javax.swing.JLabel();
        textoCusto = new javax.swing.JTextField();
        butoes = new javax.swing.JPanel();
        btnAdicionar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();
        btnApagar = new javax.swing.JButton();

        setBackground(new java.awt.Color(232, 236, 244));
        setBorder(null);
        setPreferredSize(new java.awt.Dimension(1070, 610));

        tabela.setBackground(getBackground());
        tabela.setForeground(new java.awt.Color(0, 0, 0));
        tabela.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "RESPONSAVEL", "TEXTO", "LOCALIZACAO", "CUSTO"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabela.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        tabela.setRowHeight(25);
        tabela.setRowMargin(5);
        tabela.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabela.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        tabela.setShowGrid(true);
        tabela.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                tabelaFocusLost(evt);
            }
        });
        tabela.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabela);
        if (tabela.getColumnModel().getColumnCount() > 0) {
            tabela.getColumnModel().getColumn(0).setMinWidth(0);
            tabela.getColumnModel().getColumn(0).setPreferredWidth(0);
            tabela.getColumnModel().getColumn(0).setMaxWidth(0);
        }

        dados.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        labelResponsavel.setLabelFor(textoResponsavel);
        labelResponsavel.setText("RESPONSAVEL");
        dados.add(labelResponsavel, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 14, 80, -1));

        textoResponsavel.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textoResponsavelKeyTyped(evt);
            }
        });
        dados.add(textoResponsavel, new org.netbeans.lib.awtextra.AbsoluteConstraints(104, 12, 142, -1));
        dados.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 37, 234, 10));

        labelTexto.setText("TEXTO");
        dados.add(labelTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 55, 80, -1));
        dados.add(textoTexto, new org.netbeans.lib.awtextra.AbsoluteConstraints(104, 53, 142, -1));
        dados.add(jSeparator2, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 78, 234, 10));

        labelCusto.setText("LOCALIZACAO");
        dados.add(labelCusto, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 96, 80, -1));

        textoLocalizacao.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                textoLocalizacaoKeyTyped(evt);
            }
        });
        dados.add(textoLocalizacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(104, 94, 142, -1));
        dados.add(jSeparator3, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 119, 234, 10));

        labelLocalizacao.setText("CUSTO");
        dados.add(labelLocalizacao, new org.netbeans.lib.awtextra.AbsoluteConstraints(12, 135, 80, -1));
        dados.add(textoCusto, new org.netbeans.lib.awtextra.AbsoluteConstraints(104, 135, 142, -1));

        btnAdicionar.setText("Adicionar");
        btnAdicionar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAdicionarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        btnApagar.setText("Apagar");
        btnApagar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApagarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout butoesLayout = new javax.swing.GroupLayout(butoes);
        butoes.setLayout(butoesLayout);
        butoesLayout.setHorizontalGroup(
            butoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btnApagar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(butoesLayout.createSequentialGroup()
                .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnEditar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        butoesLayout.setVerticalGroup(
            butoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(butoesLayout.createSequentialGroup()
                .addGroup(butoesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdicionar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditar, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnApagar, javax.swing.GroupLayout.DEFAULT_SIZE, 47, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 770, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(butoes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 18, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(dados, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(butoes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void tabelaCentro_Custo() throws Exception{
        
         try{
             //definir a tabela
             DefaultTableModel table = (DefaultTableModel) tabela.getModel();
             table.setRowCount(0);
             
         
             //criar uma query e executar
         ResultSet rs = stm.executeQuery("SELECT ID_CENTRO_CUSTO, RESPONSAVEL, TEXTO, CUSTO , LOCALIZACAO FROM CENTRO_CUSTO");
             
           while(rs.next())
           {
               //passar os dados da BD para um object
               Object o[] = {rs.getInt("ID_CENTRO_CUSTO"),rs.getString("RESPONSAVEL"), rs.getString("TEXTO"),
                rs.getString("LOCALIZACAO"),rs.getInt("CUSTO")};
               //Adicionar os dados à tabela
               table.addRow(o);
       }
         }
       catch(SQLException exp)
       {
           throw new Exception (exp.getMessage());
       }

     }
    
    
    public void limparCampos(){
        
        textoResponsavel.setText("");
        textoTexto.setText("");
        textoLocalizacao.setText("");
        textoCusto.setText("");
        textoCusto.setText("");
    }
    
    void buscarDados(){
        
        //Buscar os dados à tabela e disponibilizar-los para edição
        if(tabela.getSelectedRow() == -1)
         {
           JOptionPane.showMessageDialog(rootPane, "Selecione um dado para editar!", "ERRO", JOptionPane.WARNING_MESSAGE);
         }else{
            int row = tabela.getSelectedRow();
            
            textoResponsavel.setText(tabela.getModel().getValueAt(row, 1).toString());
            textoTexto.setText(tabela.getModel().getValueAt(row, 2).toString());
            textoLocalizacao.setText(tabela.getModel().getValueAt(row, 3).toString());
            textoCusto.setText(tabela.getModel().getValueAt(row, 4).toString());
        }
    }
    
    private void tabelaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelaMouseClicked
        // TODO add your handling code here:
        buscarDados();
        
    }//GEN-LAST:event_tabelaMouseClicked

    private void textoResponsavelKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoResponsavelKeyTyped
        // TODO add your handling code here:
        if(textoResponsavel.getText().length()>=13)
    {
        //nna.setText(nna.getText().substring(0, 13));
    }
    }//GEN-LAST:event_textoResponsavelKeyTyped

     
    
    private void btnAdicionarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAdicionarActionPerformed
        // TODO add your handling code here:
        
        //Verificar se os campos estão vazios.
        if(textoResponsavel.getText().isEmpty() || textoTexto.getText().isEmpty()|| textoLocalizacao.getText().isEmpty() || textoCusto.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(rootPane, "Todos os dados têm que ser preenchidos!", "ERRO", JOptionPane.WARNING_MESSAGE);
        }
            else{
                try {
                    Object responsavel = textoResponsavel.getText().toUpperCase();
                    Object texto = textoTexto.getText().toUpperCase();
                    Object centroCusto = Integer.parseInt(textoCusto.getText());
                    Object localizacao = textoLocalizacao.getText().toUpperCase();

                 stm.executeUpdate("INSERT INTO CENTRO_CUSTO(RESPONSAVEL,TEXTO, LOCALIZACAO, CUSTO) "
                                 + "VALUES('"+responsavel+"' , '"+texto+"' , "+localizacao+" , "+centroCusto+")");


                 JOptionPane.showMessageDialog(rootPane, "Dado inserido com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                    limparCampos();
                    tabelaCentro_Custo();

                } catch (SQLException | ClassNotFoundException ex) {

                    JOptionPane.showMessageDialog(rootPane, "ERRO!\n"+ex);
                } catch (Exception ex) {
                    JOptionPane.showMessageDialog(rootPane, "ERRO!");
                }
        }
    }//GEN-LAST:event_btnAdicionarActionPerformed

    private void tabelaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tabelaFocusLost
        // TODO add your handling code here:
        //tabela.getSelectionModel().clearSelection();
        btnAdicionar.setEnabled(true);
        
    }//GEN-LAST:event_tabelaFocusLost

    private void textoLocalizacaoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textoLocalizacaoKeyTyped
        // TODO add your handling code here:
        if(textoLocalizacao.getText().length()>=8)
        {
       // umc.setText(umc.getText().substring(0, 8));
        }
    }//GEN-LAST:event_textoLocalizacaoKeyTyped

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        
        if(textoResponsavel.getText().isEmpty() || textoTexto.getText().isEmpty() || textoCusto.getText().isEmpty() || textoCusto.getText().isEmpty())
        {
            JOptionPane.showMessageDialog(rootPane, "Todos os dados têm que ser preenchidos!", "ERRO", JOptionPane.WARNING_MESSAGE);
        }
        else{
         int row = tabela.getSelectedRow();
            String value = tabela.getModel().getValueAt(row, 0).toString();
        
            try{
             Object responsavel = textoResponsavel.getText().toUpperCase();
             Object texto = textoTexto.getText().toUpperCase();
             Object centroCusto = Integer.parseInt(textoCusto.getText());
             Object localizacao = textoLocalizacao.getText().toUpperCase();
             Object idCentroCusto = Integer.parseInt(value);
                
             stm.executeUpdate("UPDATE CENTRO_CUSTO SET RESPONSAVEL = '"+responsavel+"', "
                             + "TEXTO = '"+texto+"' , CUSTO = "+centroCusto+" , LOCALIZACAO = '"+localizacao+"' "
                             + "WHERE ID_CENTRO_CUSTO = "+idCentroCusto+"");
             
                JOptionPane.showMessageDialog(rootPane, "Dado editado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);

                 tabela.clearSelection();
                 limparCampos();
                 tabelaCentro_Custo();
                 
            } catch (ClassNotFoundException| SQLException ex) {

                JOptionPane.showMessageDialog(rootPane, "ERRO!\n"+ex);

            } catch (Exception ex) {
                Logger.getLogger(CentroCusto.class.getName()).log(Level.SEVERE, null, ex);
            } 
                }
    }//GEN-LAST:event_btnEditarActionPerformed

    private void btnApagarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApagarActionPerformed
        //verificar se o user selecionou algum dado
        if(tabela.getSelectedRow() == -1)
         {
            JOptionPane.showMessageDialog(rootPane, "Selecione um dado para apagar!", "ERRO", JOptionPane.WARNING_MESSAGE);
         }else{
            //buscar o valor do ID no dado selecionado 
            
            int row = tabela.getSelectedRow();
               int value = Integer.parseInt(tabela.getModel().getValueAt(row, 0).toString());
                
             //Confirmar a opção escolhida e apagar o registo
             try {
                int op = JOptionPane.showConfirmDialog(rootPane, "Tem a certeza?");
                 if(op == 0)
                 {
                      u.apagar("centro_custo", value);
                      JOptionPane.showMessageDialog(rootPane, "Dado apagado com sucesso!", "Sucesso", JOptionPane.INFORMATION_MESSAGE);
                     tabelaCentro_Custo();
                     tabela.clearSelection();
                     limparCampos();
                 }
                 
             } catch (SQLException | ClassNotFoundException ex) {
                 JOptionPane.showMessageDialog(rootPane, "ERRO!");
             } catch (Exception ex) {
                Logger.getLogger(CentroCusto.class.getName()).log(Level.SEVERE, null, ex);
            }
             
         }
    }//GEN-LAST:event_btnApagarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdicionar;
    private javax.swing.JButton btnApagar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JPanel butoes;
    private javax.swing.JPanel dados;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JLabel labelCusto;
    private javax.swing.JLabel labelLocalizacao;
    private javax.swing.JLabel labelResponsavel;
    private javax.swing.JLabel labelTexto;
    private javax.swing.JTable tabela;
    private javax.swing.JTextField textoCusto;
    private javax.swing.JTextField textoLocalizacao;
    private javax.swing.JTextField textoResponsavel;
    private javax.swing.JTextField textoTexto;
    // End of variables declaration//GEN-END:variables
}
